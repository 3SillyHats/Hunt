<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>captures = 0;
invulnerability = 0.0;
rumble = 0.0;
time = 0;
isHunter = false;
dodged = 0;

normal_x = 0
normal_y = 0
normal_time = 0

if x &lt; room_width/2 {
    hudX = 85;
} else {
    hudX = 1655;
}
if y &lt; room_height/2 {
    hudY = 85;
} else {
    hudY = 925;
}


spawn();

dir = 90;
moving = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var boost = gamepad_button_check_pressed(controller, gp_face1) and boosts &gt; 0;
var dodge = gamepad_button_check_pressed(controller, gp_face2) and boosts &gt; 0;

if (gamepad_button_check_pressed(controller, gp_select)) {
    room_goto(rmSetup);
}

if (dead) {
    spawn();
}


if (global.kills[controller] &gt;= WIN_THRESHOLD) {
    global.winner = controller;
    global.paused = true
}

if (not global.paused){
    time += 1/room_speed;
    if (invulnerability &gt; 0) {
        invulnerability -= 1/room_speed;
    }
    if (dodged &gt; 0) {
        dodged -= 1/room_speed;
    }
    
    ax = gamepad_axis_value(controller, gp_axislh);
    ay = gamepad_axis_value(controller, gp_axislv);
    
    var acc = ACCELERATION_MAX;
    //if (!isHunter) {
    //    acc *= 0.5;
    //}
    
    if(ax!=0){
        dir = -radtodeg(arctan(ay/ax));
        if(ax&lt;0){
            dir += 180;
        }
    }else if(ay &gt; 0){
        dir = -90;
    }else{
        dir = 90;
    }
    
    var norm = sqrt(ax * ax + ay * ay);
    
    if (norm &lt; DEAD_ZONE) {
        moving = false;
        ax = -FRICTION*hspeed;
        ay = -FRICTION*vspeed;
    } else {
        moving = true;
        if (norm &gt; 1) {
            ax /= norm;
            ay /= norm;
        }
        ax *= acc;
        ay *= acc;
    }
    
    var speed_max = SPEED_MAX;
    //        if (!isHunter) {
    //            speed_max *= 2;
    //        }
    if (boost and (invulnerability &lt;= 0.0 or isHunter) and norm &gt; 0.2) {
        boosts--
        global.boosts[controller]++;
        
        // Set to max speed
        
        hspeed = (ax / (norm * acc)) * speed_max * 2;
        vspeed = (ay / (norm * acc)) * speed_max * 2;
        
        // Particles
        part_type_direction(global.part_type_boost,
            (direction + 160) % 360, (direction + 200) % 360, 0, 0
        );
        part_type_speed(global.part_type_boost, speed/4, speed/2, 0, 0);
        part_emitter_region(global.particles, global.part_emitter_boost,
            x + hspeed * 4, x + hspeed * 4, y + vspeed * 4, y + vspeed * 4,
            ps_shape_ellipse, ps_distr_gaussian
        );
        part_emitter_burst(global.particles, global.part_emitter_boost, global.part_type_boost, 32);
    } else if (dodge and invulnerability &lt;= 0.0 and not isHunter) {
        boosts--
        speed = 0;
        invulnerability = INVULNERABLE_DODGE_TIME;
    } else {
        if normal_time &gt; 0 {
            var dot = ax*normal_x + ay*normal_y
            if dot &gt; 0 {
                ax = ax - normal_x*dot
                ay = ay - normal_y*dot
            }
            normal_time = normal_time - 1
        }
        
        hspeed += ax;
        vspeed += ay;
        
        speed -= speed * speed * acc / (speed_max * speed_max);
    }
} else {
    speed = 0;
}

if (rumble &gt; 0) {
    rumble -= 1/room_speed;
    gamepad_set_vibration(controller, 0.8, 0.8);
} else {
    gamepad_set_vibration(controller, 0, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objWall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (not global.paused) {
    // normal_x = other.x - self.x
    // normal_y = other.y - self.y
    // normal = sqrt(normal_x*normal_x + normal_y*normal_y)
    // normal_x /= normal
    // normal_y /= normal
    // dot = normal_x*hspeed + normal_y*vspeed
    // hspeed -= dot*normal_x;
    // vspeed -= dot*normal_y;
    //speed *= 0.65
    
    x = xprevious
    y = yprevious
    collide()
    //audio_play_sound(sndHit, 0, false);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (not global.paused) {
    if (isHunter and other.invulnerability &lt;= 0.0) {
        rumble = 0.5;
        global.kills[controller]++;
        if (boosts &lt; BOOST_MAX) {
            boosts++;
        }
        if (global.kills[controller] &gt; global.maxKills) {
            global.maxKills = global.kills[controller];
        }
    } else if (other.isHunter) {
        if (invulnerability &lt;= 0.0) {
            rumble = 0.5;
            global.deaths[controller]++;
            dead = true;
            audio_play_sound(sndExplosion, 0, false);
        } else if (dodged &lt;= 0.0) {
            global.dodges[controller]++;
            dodged = invulnerability;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw HUD box
draw_set_color(c_black);
draw_set_alpha(HUD_BOX_FADE);
draw_roundrect(hudX, hudY, hudX + 180, hudY + 70, false);

// Draw icon
draw_set_color(c_white);
draw_set_alpha(HUD_ICON_FADE);
var w = sprite_get_width(sprite_index);
var h = sprite_get_height(sprite_index);
var icon = object_get_sprite(object_index);
draw_sprite(icon, 0, hudX + 5 + w/2, hudY + 5 + h/2);

// Draw captures
draw_set_alpha(1);
draw_set_font(fntMain);
draw_text(hudX + 90, hudY + 5, global.kills[controller]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Fade if invulnerable
if (invulnerability &lt;= 0.0 or isHunter) {
    image_alpha = 1;
} else {
    image_alpha = INVULNERABLE_FADE;
}

// Draw self
if (isHunter) {
    sprite_index = sprPlayerAngry;
} else {
    sprite_index = object_get_sprite(object_index);
}
draw_self();

// Draw boosts
for (i = 0; i &lt; boosts; i++) {
    var bx = 40 * cos(2*pi/3 * i + pi*time);
    var by = 40 * sin(2*pi/3 * i + pi*time);
    draw_set_alpha(.5);
    draw_circle_color(x + bx, y + by, 8, c_white, c_white, false);
    draw_set_alpha(1);
}

// Draw arrow
if(moving){
    draw_sprite_ext(sprArrow, 0, x, y, 1, 1, dir, c_white, 0.25);
}

// Draw crown
if (global.maxKills &gt; 0 and global.kills[controller] == global.maxKills) {
    if (invulnerability &gt; 0.0 and not isHunter) {
        draw_set_alpha(INVULNERABLE_FADE);
    }
    draw_sprite(sprCrown, 0, x, y-30);
    draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
