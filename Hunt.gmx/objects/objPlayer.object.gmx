<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>captures = 0;
invulnerability = 0.0;
rumble = 0.0;
time = 0;

spawn();

dir = 90;
moving = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>time += 1/room_speed;
if (invulnerability &gt; 0) {
    invulnerability -= 1/room_speed;
}

if (dead) {
    spawn();
}

ax = gamepad_axis_value(gp, gp_axislh);
ay = gamepad_axis_value(gp, gp_axislv);

if(ax!=0){
    dir = -radtodeg(arctan(ay/ax));
    if(ax&lt;0){
        dir += 180;
    }
}else if(ay &gt; 0){
    dir = 0;
}else{
    dir = 180;
}

var boosting = gamepad_button_check(gp, gp_face1) and boosts &gt; 0;
var boosted = gamepad_button_check_released(gp, gp_face1) and boosts &gt; 0;

var norm = sqrt(ax * ax + ay * ay);

if (norm &lt; DEAD_ZONE) {
    moving = false;
    ax = -FRICTION*hspeed;
    ay = -FRICTION*vspeed;
} else {
    moving = true;
    if (norm &gt; 1) {
        ax /= norm;
        ay /= norm;
    }
    ax *= ACCELERATION_MAX;
    ay *= ACCELERATION_MAX;
}

if (boosted) {
    boosts--
    if (norm &lt; 0.2) {
        speed = 0;
        if (invulnerability &lt; INVULNERABLE_DODGE_TIME) {
            invulnerability = INVULNERABLE_DODGE_TIME;
        }
    } else {
        hspeed = (ax / (norm * ACCELERATION_MAX)) * SPEED_MAX;
        vspeed = (ay / (norm * ACCELERATION_MAX)) * SPEED_MAX;
    }
} else if (boosting) {
    speed *= BOOST_HOLD_DAMPING;
} else {
    hspeed += ax;
    vspeed += ay;
    
    speed -= speed * speed * ACCELERATION_MAX / (SPEED_MAX * SPEED_MAX);
}
if (rumble &gt; 0) {
    rumble -= 1/room_speed;
    gamepad_set_vibration(gp, 0.8, 0.8);
} else if (boosting) {
    gamepad_set_vibration(gp, 0.15, 0.15);
} else {
    gamepad_set_vibration(gp, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objWall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed *= 0.9;
audio_play_sound(sndHit, 0, false);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isHunter and other.invulnerability &lt;= 0.0) {
    rumble = 0.5;
    captures++;
} else if (other.isHunter and invulnerability &lt;= 0.0) {
    rumble = 0.5;
    dead = true;
    audio_play_sound(sndExplosion, 0, false);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw captures
draw_text(10, 10 + (30 * gp), captures);

// Draw if hunter
if (isHunter) {
    draw_circle_color(x, y, 23.5, c_red, c_red, true);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invulnerability &lt;= 0.0 or isHunter) {
    image_alpha = 1
} else {
    image_alpha = INVULNERABLE_FADE
}
draw_self();

// Draw boosts
for (i = 0; i &lt; boosts; i++) {
    var bx = 32 * cos(2*pi/3 * i + pi*time);
    var by = 32 * sin(2*pi/3 * i + pi*time);
    draw_set_alpha(.5);
    draw_circle_color(x + bx, y + by, 4, c_white, c_white, false);
    draw_set_alpha(1);
}
if(moving){
    draw_sprite_ext(sprArrow,0,x,y,1,1,dir,c_white,0.25);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
