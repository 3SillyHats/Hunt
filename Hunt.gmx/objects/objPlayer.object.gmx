<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xvel = 0;
yvel = 0;

captures = 0;
invulnerability = 0.0;
rumble = 0.0;
time = 0;
isHunter = false;
dodged = 0;

teleporting = false; // Whether the player is currently contacing a teleporter
can_teleport = true; // True unless the player has been in contact with a teleporter since their last teleport

normal_x = 0
normal_y = 0
normal_time = 0
last_collide_diag = false

if x &lt; room_width/2 {
    hudX = 85;
} else {
    hudX = 1655;
}
if y &lt; room_height/2 {
    hudY = 85;
} else {
    hudY = 925;
}

controller = -1

spawn(false);

dir = 90;
moving = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var boost = gamepad_button_check_pressed(controller, gp_face1) and boosts &gt; 0;
var dodge = gamepad_button_check_pressed(controller, gp_face2) and boosts &gt; 0;

if (global.debug and gamepad_button_check(controller, gp_shoulderl)) {
    xvel = 0
    //xvel = (xvel - yvel) / 2
    //yvel = -xvel
}

if (global.debug and gamepad_button_check(controller, gp_shoulderr)) {
    yvel = 0
    //xvel = (xvel + yvel) / 2
    //yvel = xvel
}

if (gamepad_button_check_pressed(controller, gp_select)) {
    room_goto(rmSetup);
}

if (dead) {
    spawn(true);
}

if (global.kills[controller] &gt;= WIN_THRESHOLD) {
    global.winner = controller;
    global.paused = true
}

if (not teleporting) {
    can_teleport = true
} else {
    teleporting = false
}

if (not global.paused){
    var spd2 = sqr(xvel) + sqr(yvel)
    if (spd2 &gt; sqr(SPEED_LIMIT)) {
        var spdMod = sqrt(sqr(SPEED_LIMIT) / spd2)
        xvel = xvel * spdMod
        yvel = yvel * spdMod
    }
    collide()

    time += 1/room_speed;
    if (invulnerability &gt; 0) {
        invulnerability -= 1/room_speed;
    }
    if (dodged &gt; 0) {
        dodged -= 1/room_speed;
    }
    
    ax = gamepad_axis_value(controller, gp_axislh);
    ay = gamepad_axis_value(controller, gp_axislv);
    
    var acc = ACCELERATION_MAX;
    var frict = FRICTION;
    var speed_max = SPEED_MAX;
    var boost_imp = SPEED_MAX * BOOST_JUICE;
    var modifier = instance_position(x, y, objFloorMod);
    if (modifier != noone) {
        acc *= modifier.acceleration_mod;
        frict *= modifier.friction_mod;
        speed_max *= modifier.speed_mod;
        boost_imp *= modifier.boost_mod;
    }
    
    force_floor = instance_position(x, y, objFloorForce);
    var dxvel = 0
    var dyvel = 0
    if(force_floor != noone) {
        dxvel += force_floor.speed_x
        dyvel += force_floor.speed_y
    }
    
    dir = radtodeg(arctan2(-ay,ax))
    
    var norm = sqrt(ax * ax + ay * ay);
    
    if (norm &lt; DEAD_ZONE) {
        moving = false;
        ax = -frict*(xvel-dxvel);
        ay = -frict*(yvel-dyvel);
    } else {
        moving = true;
        if (norm &gt; 1) {
            ax /= norm;
            ay /= norm;
            norm = 1;
        }
        ax *= acc;
        ay *= acc;
    }
    
    if (boost and (invulnerability &lt;= 0.0 or isHunter) and norm &gt; 0.2) {
        boosts--
        global.boosts[controller]++;
        
        // Set to max speed
        
        xvel = (ax / (norm * acc)) * boost_imp;
        yvel = (ay / (norm * acc)) * boost_imp;
        
        // Particles
        part_type_direction(global.part_type_boost,
            (direction + 160) % 360, (direction + 200) % 360, 0, 0
        );
        var spd = sqrt(sqr(xvel) + sqr(yvel))
        part_type_speed(global.part_type_boost, spd/4, spd/2, 0, 0);
        part_emitter_region(global.particles, global.part_emitter_boost,
            x + xvel * 4, x + xvel * 4, y + yvel * 4, y + yvel * 4,
            ps_shape_ellipse, ps_distr_gaussian
        );
        part_emitter_burst(global.particles, global.part_emitter_boost, global.part_type_boost, 32);
    } else if (dodge and invulnerability &lt;= 0.0 and not isHunter) {
        boosts--
        xvel = 0;
        yvel = 0;
        invulnerability = INVULNERABLE_DODGE_TIME;
    } else {
        xvel += ax;
        yvel += ay;
        
        var spd = sqrt(sqr(xvel-dxvel) + sqr(yvel-dyvel))
        if (spd &gt; 0) {
            var oldSpd = spd
            if (spd &gt; 2*speed_max) {
                spd -= 4 * acc;
            } else {
                spd -= sqr(spd) * acc / (speed_max * speed_max);    
            }
            if (spd &gt; 0) {
                xvel = dxvel + (xvel-dxvel)*spd/oldSpd
                yvel = dyvel + (yvel-dyvel)*spd/oldSpd
            } else {
                xvel = 0
                yvel = 0
            }
        }
    }
} else {
    xvel = 0;
    yvel = 0;
}

if (rumble &gt; 0) {
    rumble -= 1/room_speed;
    gamepad_set_vibration(controller, CAUGHT_RUMBLE_STRENGTH, CAUGHT_RUMBLE_STRENGTH);
} else if (isNext and objTimer.hunt_remaining &lt; HUNTER_NOTIFY_HAPTIC * 1000000) {
    gamepad_set_vibration(controller, NOTIFY_RUMBLE_STRENGTH, NOTIFY_RUMBLE_STRENGTH);
} else {
    gamepad_set_vibration(controller, 0, 0);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (not global.paused) {
    if (isHunter and other.invulnerability &lt;= 0.0) {
        rumble = 0.5;
        global.kills[controller]++;
        ds_list_add(global.events[controller], 1);
        if (boosts &lt; BOOST_MAX) {
            boosts++;
        }
        if (global.kills[controller] &gt; global.maxKills) {
            global.maxKills = global.kills[controller];
        }
    } else if (other.isHunter) {
        if (invulnerability &lt;= 0.0) {
            rumble = 0.5;
            global.deaths[controller]++;
            ds_list_add(global.events[controller], 0);
            dead = true;
            audio_play_sound(sndExplosion, 0, false);
        } else if (dodged &lt;= 0.0) {
            global.dodges[controller]++;
            dodged = invulnerability;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw HUD box
draw_set_color(c_black);
draw_set_alpha(HUD_BOX_FADE);
draw_roundrect(hudX, hudY, hudX + 180, hudY + 70, false);

// Draw icon
draw_set_color(c_white);
draw_set_alpha(HUD_ICON_FADE);
var w = sprite_get_width(sprite_index);
var h = sprite_get_height(sprite_index);
var icon = object_get_sprite(object_index);
draw_sprite(icon, 0, hudX + 5 + w/2, hudY + 5 + h/2);

// Draw captures
draw_set_alpha(1);
draw_set_font(fntMain);
draw_text(hudX + 90, hudY + 5, global.kills[controller]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Fade if invulnerable
if (invulnerability &lt;= 0.0 or isHunter) {
    image_alpha = 1;
} else {
    image_alpha = INVULNERABLE_FADE;
}

// Draw self
if (isHunter or (isNext and objTimer.hunt_remaining &lt; HUNTER_NOTIFY_VISUAL * 1000000 and floor(objTimer.hunt_remaining*5/1000000) mod 2 == 1) ) {
    image_index = 1;
} else {
    image_index = 0;
}
draw_self();

// Draw boosts
for (i = 0; i &lt; boosts; i++) {
    var bx = 40 * cos(2*pi/3 * i + pi*time);
    var by = 40 * sin(2*pi/3 * i + pi*time);
    draw_set_alpha(.5);
    draw_circle_color(x + bx, y + by, 8, c_white, c_white, false);
    draw_set_alpha(1);
}

// Draw arrow
if(moving){
    draw_sprite_ext(sprArrow, 0, x, y, 1, 1, dir, c_white, 0.25);
}

if (global.debug) {
    var dir2 = radtodeg(arctan2(-normal_y, normal_x))
    draw_sprite_ext(sprArrow, 0, x, y, 1, 1, dir2, c_red, 0.25);
}

// Draw crown
if (global.maxKills &gt; 0 and global.kills[controller] == global.maxKills) {
    if (invulnerability &gt; 0.0 and not isHunter) {
        draw_set_alpha(INVULNERABLE_FADE);
    }
    draw_sprite(sprCrown, 0, x, y-30);
    draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
