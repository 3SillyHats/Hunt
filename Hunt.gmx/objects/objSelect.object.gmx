<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var r = rmBase;

rooms[0] = r

while( r != room_last) {
    r = room_next(r)
    rooms[array_length_1d(rooms)] = r
}

selected = 0;

for (i = 0; i &lt; PLAYERS_MAX; i++) {
    pressed[i] = false;
}

// Make background taupe
background_blend[0] = make_color_hsv(18, 99, 178);

columns = ceil(array_length_1d(rooms) * string_height("M") / (room_height - 64))
colheight = ceil(array_length_1d(rooms) / columns)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; PLAYERS_MAX; i++) {
    if not gamepad_is_connected(i) { continue; }
    var vaxis = gamepad_axis_value(i, gp_axislv);
    var haxis = gamepad_axis_value(i, gp_axislh);
    var up = vaxis &lt; -MENU_DEAD_ZONE or gamepad_button_check_pressed(i,gp_padu);
    var down = vaxis &gt; MENU_DEAD_ZONE or gamepad_button_check_pressed(i,gp_padd);
    var left = haxis &lt; -MENU_DEAD_ZONE or gamepad_button_check_pressed(i,gp_padl);
    var right = haxis &gt; MENU_DEAD_ZONE or gamepad_button_check_pressed(i,gp_padr);
    
    if (gamepad_button_check_pressed(i, gp_face1)) {
        // Select option
        audio_play_sound(sndBlip, 0, false);
        global.selected_room = rooms[selected];
        room_goto(global.selected_room);
    } else if (gamepad_button_check_pressed(i, gp_face2)) {
        // Select option
        audio_play_sound(sndBlip, 0, false);
        room_goto(rmSetup);
    } else if (down) {
        // Move down
        if (not pressed[i]) {
            selected = (selected + 1) % array_length_1d(rooms);
            pressed[i] = true;
            audio_play_sound(sndBlip, 0, false);
        }
    } else if (up) {
        // Move up
        if (not pressed[i]) {
            selected = (selected + array_length_1d(rooms) - 1) % array_length_1d(rooms);
            pressed[i] = true;
            audio_play_sound(sndBlip, 0, false);
        }
    } else if (right) {
        // Move right
        if (not pressed[i] and columns &gt; 1) {
            selected = (selected + colheight) % (columns*colheight);
            if (selected &gt;= array_length_1d(rooms)) {
                selected = array_length_1d(rooms) - 1
            }
            pressed[i] = true;
            audio_play_sound(sndBlip, 0, false);
        }
    } else if (left) {
        // Move left
        if (not pressed[i] and columns &gt; 1) {
            selected = (selected + (columns - 1)*colheight) % (columns*colheight);
            if (selected &gt;= array_length_1d(rooms)) {
                selected = array_length_1d(rooms) - 1
            }
            pressed[i] = true;
            audio_play_sound(sndBlip, 0, false);
        }
    } else {
        pressed[i] = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var col = 0; col &lt; columns; col++) {
    if (col &lt; columns - 1) {
        var height = colheight
    } else {
        var height = array_length_1d(rooms) - (columns - 1) * colheight
    }
    for (var k = 0; k &lt; height; k++) {
        var name = room_get_name(rooms[k + col*colheight]);
        name = string_delete(name, 1, 2)
        n = string_digits(name)
        if (n != "") {
            name = string_replace(name, n, "") + " " + n
        }
        if (k + col*colheight == selected) {
            draw_set_alpha(1);
        } else {
            draw_set_alpha(HUD_OPTION_FADE);
        }
        draw_text(
            (col + 1)*room_width/(columns + 1) - string_width(name)/2,
            room_height/2 + (string_height("M") * (k - colheight/2.0)),
            name
        );
    }
}
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
