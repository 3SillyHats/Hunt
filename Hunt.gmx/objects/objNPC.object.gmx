<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNPC</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objHazard</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

old_time = 0

normal_x = cos(degtorad(image_angle))
normal_y = -sin(degtorad(image_angle))

old_x = x + (normal_x-normal_y)*sprite_width/2
old_y = y + (normal_x+normal_y)*sprite_height/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(not global.paused) {
    var new_time = objTimer.hunt_remaining
    if(new_time &gt; old_time) {
        old_time = old_time + HUNT_TIME * 1000000
    }
    var dt = old_time - new_time
    while(dt &gt; 1000000/NPC_SPEED_MAX) {
        old_x = old_x + 60*normal_x
        old_y = old_y + 60*normal_y
        dt = dt - 1000000/NPC_SPEED_MAX
        old_time = new_time + dt
        
        var rail = instance_position(old_x, old_y, objRail)
        if(rail != noone) {
            var dir = (image_angle+180) mod 360
            if(dir == rail.dir1) {
                image_angle = rail.dir2
                normal_x = cos(degtorad(image_angle))
                normal_y = -sin(degtorad(image_angle))
            } else if(dir == rail.dir2) {
                image_angle = rail.dir1
                normal_x = cos(degtorad(image_angle))
                normal_y = -sin(degtorad(image_angle))
            }
        }
    }
    var dx = dt * 60 * NPC_SPEED_MAX / 1000000
    x = old_x + dx*normal_x - (normal_x-normal_y)*sprite_width/2
    y = old_y + dx*normal_y - (normal_x+normal_y)*sprite_height/2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>30,30</point>
  </PhysicsShapePoints>
</object>
