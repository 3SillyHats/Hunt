<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; 4; i++) {
    global.players[i] = i;
    pressed[i] = false;
    selected[i] = false;
    avatarTaken[i] = false;
}

// Make background taupe
background_blend[0] = make_color_hsv(18, 99, 178);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; PLAYERS_MAX; i++) {
    if not gamepad_is_connected(i) { continue; }

    var gp_axis_lh = gamepad_axis_value(i, gp_axislh);

    if (gamepad_button_check_pressed(i, gp_start)) {
        // Play game
        var selections = 0;
        for (i = 0; i &lt; 4; i++) {
            if (selected[i]) { selections++; }
        }
        if (selections &gt;= 2) {
            global.nPlayers = selections;
            audio_play_sound(sndBlip, 0, false);
            room_goto_next();
        }
    } else if (selected[i] and
            gamepad_button_check_pressed(i, gp_face2)) {
        // Cancel selection
        avatarTaken[global.players[i]] = false;
        selected[i] = false;
        pressed[i] = false;
        audio_play_sound(sndBlip, 0, false);
    } else if (not selected[i] and
            gamepad_button_check_pressed(i, gp_face1)) {
        // Make selection
        avatarTaken[global.players[i]] = true;
        selected[i] = true;
        pressed[i] = false;
        audio_play_sound(sndBlip, 0, false);
    } else if (not selected[i] and gp_axis_lh &gt; DEAD_ZONE) {
        // Move right
        if (not pressed[i]) {
            do {
                global.players[i] = (global.players[i] + 1) % 4;
            } until (not avatarTaken[global.players[i]]);
            pressed[i] = true;
            audio_play_sound(sndBlip, 0, false);
        }
    } else if (not selected[i] and gp_axis_lh &lt; -DEAD_ZONE) {
        // Move left
        if (not pressed[i]) {
            do {
                global.players[i] = global.players[i] - 1;
                if (global.players[i] &lt; 0) {
                    global.players[i] += 4;
                }
            } until (not avatarTaken[global.players[i]]);
            pressed[i] = true;
            audio_play_sound(sndBlip, 0, false);
        }
    } else {
        pressed[i] = false;
    }
}

for (i = 0; i &lt; gamepad_get_device_count(); i++) {
    if (not selected[i]) {
        while (avatarTaken[global.players[i]]) {
            global.players[i] = (global.players[i] + 1) % 4;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; PLAYERS_MAX; i++) {
    if selected[i] {
        switch (global.players[i]) {
            case 0: global.players[i] = objPlayer1; break;
            case 1: global.players[i] = objPlayer2; break;
            case 2: global.players[i] = objPlayer3; break;
            case 3: global.players[i] = objPlayer4; break;
        };
    } else {
        global.players[i] = noone;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var w = 410;
var h = 660;
var spacing = 30;
var xmargin = 95;
var ymargin = 95;

for (i = 0; i &lt; PLAYERS_MAX; i++) {
    // Draw box
    if (selected[i]) {
        switch (global.players[i]) {
            case 0: draw_set_color(c_purple); break;
            case 1: draw_set_color(c_green); break;
            case 2: draw_set_color(c_blue); break;
            case 3: draw_set_color(c_yellow); break;
        }
    } else {
        draw_set_color(c_black);
    }
    draw_set_alpha(HUD_BOX_FADE);
    draw_roundrect(
        (w + spacing) * i + xmargin, ymargin,
        w + ((w + spacing) * i) + xmargin, h + ymargin,
        false
    );
    
    if (selected[i]) {
        draw_set_alpha(1);
    } else {
        draw_set_alpha(HUD_SELECT_FADE);
    }
    
    // Draw avatar
    draw_set_color(c_white);
    var aw = sprite_get_width(sprAvatars);
    
    draw_sprite(sprAvatars, global.players[i],
        (w - aw) / 2 + (w + spacing) * i + xmargin,
        30 + ymargin
    );
    
    // Draw icon
    var icon
    switch (global.players[i]) {
        case 0: icon = sprPlayer1; break;
        case 1: icon = sprPlayer2; break;
        case 2: icon = sprPlayer3; break;
        case 3: icon = sprPlayer4; break;
    }
    draw_sprite(icon, 0,
        w  / 2 + (w + spacing) * i + xmargin,
        -60 + h + ymargin
    );
    draw_set_alpha(1);
    
    // Draw arrows
    if (not selected[i]) {
        draw_sprite_ext(sprArrow, 0,
            w  / 2 + (w + spacing) * i + xmargin,
            -60 + h + ymargin, 1, 1,
            0,
            c_white, 1
        );
        draw_sprite_ext(sprArrow, 0,
            w  / 2 + (w + spacing) * i + xmargin,
            -60 + h + ymargin, 1, 1,
            180,
            c_white, 1
        );
    }
    
    // Draw controller
    var controller;
    if gamepad_is_connected(i) {
        switch (gamepad_get_description(i)) {
            case "Xbox 360 Controller (XInput STANDARD GAMEPAD)": controller = 2; break;
            case "PLAYSTATION(R)3 Controller": controller = 3; break;
            default: controller = 1; break;
        }
    } else {
        controller = 0;
    }
    draw_sprite(sprController, controller,
        w  / 2 + (w + spacing) * i + xmargin,
        60 + h + ymargin
    );
    
    // Draw prompt
    var prompt = "Waiting for players...";
    var selections = 0;
    for (j = 0; j &lt; 4; j++) {
        if (selected[j]) { selections++; }
    }
    if selections &gt;= 2 { prompt = "Press start to begin!"; }
    draw_set_alpha(1);
    draw_set_font(fntMain);
    draw_text(
        room_width/2 - string_width(prompt)/2,
        room_height - 150,
        prompt
    );
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
