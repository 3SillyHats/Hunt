<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>options[0] = "Rematch";
options[1] = "Select Characters";
//options[2] = "Quit";
selected = 0;

for (i = 0; i &lt; PLAYERS_MAX; i++) {
    pressed[i] = false;
}

// Make background purple
background_blend[0] = make_color_hsv(197, 100, 81);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var gamepads = 0;
var gp_num = gamepad_get_device_count();
for (var i = 0; i &lt; gp_num; i++;) {
    if gamepad_is_connected(i) {
        gamepads++;
    }
}

for (i = 0; i &lt; gamepads; i++) {
    var axis = gamepad_axis_value(i, gp_axislv);
    
    if (gamepad_button_check_pressed(i, gp_face1)) {
        // Select option
        switch (selected) {
        case 0:
            audio_play_sound(sndBlip, 0, false);
            room_goto(rmGame);
            break;
        case 1:
            audio_play_sound(sndBlip, 0, false);
            room_goto(rmSetup);
            break;
        case 2:
            audio_play_sound(sndBlip, 0, false);
            game_end();
            break;
        }
    } else if (axis &gt; DEAD_ZONE) {
        // Move down
        if (not pressed[i]) {
            selected = (selected + 1) % array_length_1d(options);
            pressed[i] = true;
            audio_play_sound(sndBlip, 0, false);
        }
    } else if (axis &lt; -DEAD_ZONE) {
        // Move up
        if (not pressed[i]) {
            selected = (selected - 1) % array_length_1d(options);
            pressed[i] = true;
            audio_play_sound(sndBlip, 0, false);
        }
    } else {
        pressed[i] = false;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var w = 410;
var h = 660;
var spacing = 30;
var xmargin = 95 + ((w + spacing) * (4 - global.nPlayers))/2;
var ymargin = 95;

var i = 0;
for (j = 0; j &lt; PLAYERS_MAX; j++) {
    if (global.players[j] == noone) { continue; }
    
    // Draw box
    if (global.winner == j) {
        draw_set_color(make_color_hsv(36, 255, 255));
    } else {
        draw_set_color(c_black);
    }
    draw_set_alpha(HUD_BOX_FADE);
    draw_roundrect(
        (w + spacing) * i + xmargin, ymargin,
        w + ((w + spacing) * i) + xmargin, h + ymargin,
        false
    );
    
    // Draw avatar
    draw_set_alpha(1);
    draw_set_color(c_white);
    var aw = sprite_get_width(sprAvatars);
    var frame;
    switch (global.players[j]) {
        case objPlayer1: frame = 0; break;
        case objPlayer2: frame = 1; break;
        case objPlayer3: frame = 2; break;
        case objPlayer4: frame = 3; break;
    }
    draw_sprite(sprAvatars, frame,
        (w - aw) / 2 + (w + spacing) * i + xmargin,
        30 + ymargin
    );
    
    // Draw stats
    draw_set_font(fntMain);
    var sh = string_height("M");
    draw_text(
        20 + (w + spacing) * i + xmargin, 350 + ymargin,
        "Kills: " + string(global.kills[j])
    );
    draw_text(
        20 + (w + spacing) * i + xmargin, sh + 350 + ymargin,
        "Deaths: " + string(global.deaths[j])
    );
    draw_text(
        20 + (w + spacing) * i + xmargin, (2 * sh) + 350 + ymargin,
        "Dodges: " + string(global.dodges[j])
    );
    draw_text(
        20 + (w + spacing) * i + xmargin, (3 * sh) + 350 + ymargin,
        "Boosts: " + string(global.pickups[j])
    );
    
    // Draw options
    for (k = 0; k &lt; array_length_1d(options); k++) {
        if (k == selected) {
            draw_set_alpha(1);
        } else {
            draw_set_alpha(HUD_OPTION_FADE);
        }
        draw_text(
            room_width/2 - string_width(options[k])/2,
            room_height - 300 + (string_height("M") * k),
            options[k]
        );
    }
    draw_set_alpha(1);
    
    i++;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
